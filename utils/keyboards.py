from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder


class KB:

    b_shop = InlineKeyboardButton(text='üè™ –ú–∞–≥–∞–∑–∏–Ω', callback_data='shop')
    b_payment = InlineKeyboardButton(text='üí≥ –û–ø–ª–∞—Ç–∞', callback_data='payment')
    b_monitoring = InlineKeyboardButton(text='üëÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', url='https://t.me/MyCryptoInformer_bot')
    b_planner = InlineKeyboardButton(text='–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏', callback_data='planner')
    b_finances = InlineKeyboardButton(text='üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏', url='https://t.me/family_finances_app_bot')
    b_parser = InlineKeyboardButton(text='üìù –ü–∞—Ä—Å–µ—Ä', url='https://t.me/dnb8866_bot')
    b_questions = InlineKeyboardButton(text='üìç –û–ø—Ä–æ—Å', callback_data='questions')
    b_moderate = InlineKeyboardButton(text='üíª –ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data='moderate')
    b_admin = InlineKeyboardButton(text='‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞', callback_data='admin')

    b_back_to_main = InlineKeyboardButton(text='üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='start')

    b_remove_notice = InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='remove_notice')

    @classmethod
    def main(cls) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.row(cls.b_shop, cls.b_payment)
        builder.row(cls.b_monitoring, cls.b_parser)
        builder.row(cls.b_planner)
        builder.row(cls.b_finances)
        builder.row(cls.b_questions, cls.b_moderate)
        builder.row(cls.b_admin)
        return builder.as_markup()

    @classmethod
    def back_to_main(cls) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.add(cls.b_back_to_main)
        return builder.as_markup()

    @classmethod
    def remove_notice(cls) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.add(cls.b_remove_notice)
        return builder.as_markup()


class PaymentKB(KB):

    b_payment_sber = InlineKeyboardButton(text='–°–±–µ—Ä', callback_data='payment_sber')
    b_payment_yookassa = InlineKeyboardButton(text='–Æ–ö–∞—Å—Å–∞', callback_data='payment_yookassa')
    b_payment_paymaster = InlineKeyboardButton(text='PayMaster', callback_data='payment_paymaster')

    b_back_to_payment = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='payment')

    @classmethod
    def payment(cls) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.add(
            cls.b_payment_sber,
            cls.b_payment_paymaster,
            cls.b_payment_yookassa,
            cls.b_back_to_main)
        return builder.adjust(1).as_markup()

    @classmethod
    def back_to_payment(cls) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.add(cls.b_back_to_payment)
        return builder.as_markup()


class ShopKB(KB):
    b_buy = InlineKeyboardButton(text='üí∞ –ö—É–ø–∏—Ç—å', callback_data='buy')
    b_add_to_cart = InlineKeyboardButton(text='üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='add_to_cart')
    b_show_cart = InlineKeyboardButton(text='üõí –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='show_cart')
    b_clean_cart = InlineKeyboardButton(text='üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='clean_cart')
    b_place_order = InlineKeyboardButton(text='üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='place_order')
    b_my_orders = InlineKeyboardButton(text='üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data='my_orders')
    b_increace_quantity = InlineKeyboardButton(text='+', callback_data='change_quantity_1')
    b_decreace_quantity = InlineKeyboardButton(text='-', callback_data='change_quantity_-1')

    @classmethod
    def back_to_shop(cls) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.add(cls.b_shop)
        return builder.as_markup()

    @classmethod
    def choose(
            cls,
            categories: list[tuple[int, str]],
            prefix: str,
            back_to_shop_button: bool = False,
            my_orders_button: bool = False
    ) -> InlineKeyboardMarkup:

        builder = InlineKeyboardBuilder()
        for i, (id_, text) in enumerate(categories):
            if i % 2 == 0:
                builder.row(InlineKeyboardButton(text=text, callback_data=f'{prefix}_{id_}'))
            else:
                builder.add(InlineKeyboardButton(text=text, callback_data=f'{prefix}_{id_}'))
        builder.row(cls.b_show_cart)
        if my_orders_button:
            builder.row(cls.b_my_orders)
        if back_to_shop_button:
            builder.row(cls.b_shop)
        builder.row(cls.b_back_to_main)
        return builder.as_markup()

    @classmethod
    def item(cls) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.add(
            cls.b_buy,
            cls.b_add_to_cart,
            cls.b_decreace_quantity, cls.b_increace_quantity,
            cls.b_shop,
            cls.b_back_to_main)
        return builder.adjust(1, 1, 2, 1).as_markup()

    @classmethod
    def show_cart(cls):
        builder = InlineKeyboardBuilder()
        builder.add(cls.b_place_order, cls.b_clean_cart, cls.b_shop)
        return builder.adjust(1).as_markup()


class PlannerKB(KB):
    b_add_slot = InlineKeyboardButton(text='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç', callback_data='add_slot')
    b_cancel_slot = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='cancel_slot')
    b_my_slots = InlineKeyboardButton(text='–ú–æ–∏ –∑–∞–ø–∏—Å–∏', callback_data='my_slots')

    b_for_admin = InlineKeyboardButton(text='–î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞', callback_data='planner_for_admin')
    b_for_client = InlineKeyboardButton(text='–î–ª—è –∫–ª–∏–µ–Ω—Ç–∞', callback_data='planner_for_client')

    b_my_schedule = InlineKeyboardButton(text='–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='my_schedule')

    b_back_to_planner = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='planner')

    @classmethod
    def main(cls):
        builder = InlineKeyboardBuilder()
        builder.row(cls.b_for_client, cls.b_for_admin, cls.b_back_to_main)
        return builder.adjust(1).as_markup()

